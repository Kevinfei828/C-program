//
//  practice new.c
//  practice
//
//  Created by Kevinfei on 2022/2/22.
//

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

struct node
{
    int data;
    struct node *next;
};
typedef struct node NODE;

NODE *createlist(int *, int);
void printlist(NODE *);
void freelist(NODE *);
void insertnode(NODE *, int);
NODE *searchnode(NODE *, int);
NODE *deletenode(NODE *, NODE *);
int listlength(NODE *first);
void combinelist(NODE **first1, NODE **first2);

int main(void)
{
    NODE *first, *second;
    
    int arr1[] = {12, 43, 56, 34, 98};
    int arr2[] = {36, 77, 99};
    first = createlist(arr1, 5);
    second = createlist(arr2, 3);
    printlist(first);
    printlist(second);
    
    combinelist(&first, &second);
    printlist(first);
    printlist(second);

    freelist(first);
    
    return 0;
}
  
NODE *createlist(int *arr, int len)
{
    NODE *first, *current, *previous;
    for (int i = 0; i < len; i++)
    {
        current = (NODE *) malloc(sizeof(NODE));
        current->data = arr[i];
        if (i == 0)
        {
            first = current;
        }
        else
        {
            previous->next = current;
        }
        current->next = NULL;
        previous = current;
    }
    return first; //傳回list第一個node address
}

void printlist(NODE* first)
{
    NODE* node = first;
    if (first == NULL)
    {
        printf("list is empty!\n");
    }
    else
    {
        while (node != NULL)
        {
            printf("%-4d", node->data);
            node = node->next;
        }
        printf("\n");
    }
}

void freelist(NODE* first)
{
    NODE *current, *tmp;
    current = first;
    while (current != NULL)
    {
        tmp = current;
        current = current->next;
        free(tmp);
    }
}

NODE* searchnode(NODE* first, int item)
{
    NODE *node = first;
    while (node != NULL)
    {
        if (node->data == item)
        {
            return node;
        }
        else
        {
            node = node->next;
        }
    }
    return NULL;
}

void insertnode(NODE *node, int item)
{
    NODE *newnode;
    newnode = (NODE *) malloc(sizeof(NODE));
    newnode->data = item;
    newnode->next = node->next;
    node->next = newnode;
}

NODE* deletenode(NODE *first, NODE *node)
{
    NODE *ptr = first;
    if (first == NULL) //list為空
    {
        printf("list is already empty!!\n");
        return NULL;
    }
    
    if (node == first) //刪第一個node
    {
        first = first->next;
    }
    else //刪其他node
    {
        while (ptr->next != node)
        {
            ptr = ptr->next;
        }
        ptr->next = node->next;
    }
    free(node);
    return first;
}

int listlength(NODE *first)
{
    int num = 0;
    NODE *current = first;
    while (current != NULL)
    {
        num++;
        current = current->next;
    }
    return num;
}

void combinelist(NODE **first1, NODE **first2) //將第二個list串在第一個list的後面
{
    NODE **tmp1 = first1, **tmp2 = first2;
    NODE *first = *tmp1;
    
    while ((*tmp1)->next != NULL)
    {
        (*tmp1) = (*tmp1)->next;
    }
    (*tmp1)->next = *first2;
    *tmp1 = first;
    *tmp2 = first;
}
